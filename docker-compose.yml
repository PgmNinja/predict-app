version: '3'

services:
  redis:
    image: redis:alpine
    container_name: redis 
    networks:
      - main
    ports:
      - "6379:6379"
    restart: on-failure

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    command: celery -A core worker -l info
    container_name: celery_worker
    depends_on:
      - backend
      - redis
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
        reservations:
          cpus: '0.25'
          memory: 20M
    hostname: celery_worker
    networks:
      - main
    restart: on-failure

  celery_beat:
    build:
        context: ./backend
        dockerfile: Dockerfile.backend
    command: celery -A core worker -l info -B
    container_name: celery_beat
    depends_on:
      - backend
      - redis
    hostname: celery_beat
    networks:
      - main
    restart: on-failure

  backend:
    build:
      dockerfile: Dockerfile.backend
      context: ./backend
    volumes:
      - ./backend:/app/backend-prediction
    command: python3 manage.py runserver 0.0.0.0:8000
    container_name: backend
    environment:
      - DJANGO_SETTINGS_MODULE=backend.settings.environments.local
    ports:
      - "8000:8000"
    expose:
      - 8000
    networks:
      - main
    restart: on-failure
    stdin_open: true
    tty: true
    depends_on:
      - redis

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: frontend
    volumes:
      - ./frontend:/app/frontend-prediction
    networks:
      - main
    restart: on-failure
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    command: npm start
    depends_on:
      - backend

networks:
  main:
