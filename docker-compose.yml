version: '3'

services:
  redis:
    image: redis:alpine
    container_name: redis 
    networks:
      - main
    ports:
      - "6379:6379"
    restart: on-failure

  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    networks:
      - main
    ports:
      - "5432:5432"
    restart: on-failure
    volumes:
      - postgresql-data:/var/lib/postgresql/data

  celery_worker:
    build:
      context: ./prediction-app-backend
      dockerfile: Dockerfile.backend
    command: celery -A core worker -l info
    container_name: celery_worker
    depends_on:
      - backend
      - postgres
      - redis
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
        reservations:
          cpus: '0.25'
          memory: 20M
    hostname: celery_worker
    networks:
      - main
    restart: on-failure

  celery_beat:
    build:
        context: ./prediction-app-backend
        dockerfile: Dockerfile.backend
    command: celery -A core worker -l info -B
    container_name: celery_beat
    depends_on:
      - backend
      - postgres
      - redis
    hostname: celery_beat
    networks:
      - main
    restart: on-failure

  backend:
    build:
      dockerfile: Dockerfile.backend
      context: ./prediction-app-backend
    command: gunicorn core.wsgi --bind 0.0.0.0:8000
    container_name: backend
    ports:
      - "8000:8000"
    expose:
      - 8000
    networks:
      - main
    links:
      - postgres:postgres
    restart: on-failure
    depends_on:
      - postgres
      - redis

  nginx:
    build:
      context: ./prediction-app-frontend/predictionAPI
      dockerfile: Dockerfile.frontend
    container_name: nginx
    networks:
      - main
    restart: on-failure
    ports:
      - 80:8080
    volumes:
      - ./nginx/nginx-setup.conf:/etc/nginx/conf.d/default.conf:ro
    environment:
      PGID: 1000
      PUID: 1000
    depends_on:
      - backend

networks:
  main:

volumes:
  postgresql-data: